from pydantic import BaseModel, EmailStr,SecretStr
from typing import Optional
from datetime import datetime

# Institution model
class Institution(BaseModel):
    # id: Optional[int]  # Autogenerated, hence Optional for input
    name: str
    location: str
    created_at: Optional[datetime] = datetime.now()

# User model
class User(BaseModel):
    id: Optional[int]
    name: str
    email: EmailStr  # Pydantic provides EmailStr for email validation
    password: str
    institution_id: Optional[int]  # Nullable foreign key
    created_at: Optional[datetime] = datetime.now()

# Publication model
class Publication(BaseModel):
    id: Optional[int]
    title: str
    abstract: str
    content: str
    user_id: int  # Foreign key to users
    type: str
    created_at: Optional[datetime] = datetime.now()

# Project model
class Project(BaseModel):
    id: Optional[int]
    title: str
    description: str
    user_id: int  # Foreign key to users
    created_at: Optional[datetime] = datetime.now()

# Question model
class Question(BaseModel):
    id: Optional[int]
    title: str
    content: str
    user_id: int  # Foreign key to users
    created_at: Optional[datetime] = datetime.now()

# Answer model
class Answer(BaseModel):
    id: Optional[int]
    content: str
    question_id: int  # Foreign key to questions
    user_id: int  # Foreign key to users
    created_at: Optional[datetime] = datetime.now()

# Follower model
class Follower(BaseModel):
    id: Optional[int]
    follower_id: int  # Foreign key to users (follower)
    followed_id: int  # Foreign key to users (followed)
    created_at: Optional[datetime] = datetime.now()

# Skill model
class Skill(BaseModel):
    id: Optional[int]
    name: str
    created_at: Optional[datetime] = datetime.now()

# UserSkill model
class UserSkill(BaseModel):
    id: Optional[int]
    user_id: int  # Foreign key to users
    skill_id: int  # Foreign key to skills
    created_at: Optional[datetime] = datetime.now()

# Job model
class Job(BaseModel):
    id: Optional[int]
    title: str
    description: str
    institution_id: int  # Foreign key to institutions
    created_at: Optional[datetime] = datetime.now()

# Message model
class Message(BaseModel):
    id: Optional[int]
    content: str
    sender_id: int  # Foreign key to users (sender)
    receiver_id: int  # Foreign key to users (receiver)
    created_at: Optional[datetime] = datetime.now()

# Notification model
class Notification(BaseModel):
    id: Optional[int]
    content: str
    user_id: int  # Foreign key to users
    created_at: Optional[datetime] = datetime.now()